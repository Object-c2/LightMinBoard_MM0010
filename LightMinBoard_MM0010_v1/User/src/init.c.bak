/**
  ************************************* Copyright ****************************** 
  *
  *                 (C) Copyright 2023,楠瘦,China, GCU.
  *                            All Rights Reserved
  *                              
  *                     By(nanshou)
  *                     
  *    
  * FileName   : init.c   
  * Version    : v1.0		
  * Author     : 			
  * Date       : 2023-03-13         
  * Description:    
  * Function List:  
  	1. ....
  	   <version>: 		
  <modify staff>:
  		  <data>:
   <description>:  
  	2. ...
  ******************************************************************************
 */
#include "AllFile.h"

/* -------------------------------- begin  -------------------------------- */
/**
  * @Name    gpio_init
  * @brief   GPIO初始化
  * @param   None
  * @retval
  * @author 
  * @Data    2023-03-13
  * 1. ...
  * <modify staff>:
  * <data>        :
  * <description> :
  * 2. ...
 **/
/* -------------------------------- end -------------------------------- */

void gpio_init(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBENR_GPIOA,ENABLE);
	//上拉输入
	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8|GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_IPU;  
	GPIO_Init(GPIOA,&GPIO_InitStructure);		
	//推挽输出
	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_2|GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_15;
	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP;  
	GPIO_Init(GPIOA,&GPIO_InitStructure);
	//复用推挽输出
	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_12;
	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP;  
	GPIO_Init(GPIOA,&GPIO_InitStructure);
	//浮空输入
	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_FLOATING;  
	GPIO_Init(GPIOA,&GPIO_InitStructure);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);	
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_1);	
}


/* -------------------------------- begin  -------------------------------- */
/**
  * @Name    uart_init
  * @brief   串口初始化
  * @param   None
  * @retval
  * @author  
  * @Data    2023-03-13
  * 1. ...
  * <modify staff>:
  * <data>        :
  * <description> :
  * 2. ...
 **/
/* -------------------------------- end -------------------------------- */

void uart_init(u32 bound)
{
	RCC_APB1PeriphClockCmd(RCC_APB1ENR_UART1, ENABLE);
	UART_InitTypeDef UART_InitStructure;
	UART_InitStructure.BaudRate = bound;
    UART_InitStructure.WordLength = UART_WordLength_8b;
    UART_InitStructure.StopBits = UART_StopBits_1;
    UART_InitStructure.Parity = UART_Parity_No;
    UART_InitStructure.Mode = UART_Mode_Rx|UART_Mode_Tx;
    UART_InitStructure.HWFlowControl = UART_HWFlowControl_None;
    UART_Init(UART1, &UART_InitStructure);	
	//清除中断标志位
    UART1->ICR = UART_IT_RXIEN;
    //使能接受中断
    UART_ITConfig(UART1, UART_IT_RXIEN, ENABLE);
	UART_Cmd(UART1, ENABLE);		
}




/* -------------------------------- begin  -------------------------------- */
/**
  * @Name    timer_init
  * @brief   定时器初始化
  * @param   None
  * @retval
  * @author  
  * @Data    2023-03-13
  * 1. ...
  * <modify staff>:
  * <data>        :
  * <description> :
  * 2. ...
 **/
/* -------------------------------- end -------------------------------- */

void timer_init(void)
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    RCC_APB1PeriphClockCmd(RCC_APB1ENR_TIM1, ENABLE); 
    TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
    TIM_TimeBaseStructure.TIM_Period = 100-1;
    TIM_TimeBaseStructure.TIM_Prescaler = 480-1;
    //Setting Clock Segmentation
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    //TIM Upward Counting Mode
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

    TIM_ARRPreloadConfig(TIM1, ENABLE);
    TIM_ClearFlag(TIM1, TIM_FLAG_Update);
    TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
	TIM_Cmd(TIM1, ENABLE);
}




void nvic_init(void)
{
	NVIC_InitTypeDef NVIC_Struct;
	NVIC_Struct.NVIC_IRQChannel = UART1_IRQn;
	NVIC_Struct.NVIC_IRQChannelPriority = 1;
	NVIC_Struct.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_Struct);
	
	exNVIC_Init_TypeDef  NVIC_InitStruct;
    NVIC_InitStruct.NVIC_IRQChannel = TIM1_BRK_UP_TRG_COM_IRQn;
    NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
    NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
    exNVIC_Init(&NVIC_InitStruct);
}

/* -------------------------------- begin  -------------------------------- */
/**
  * @Name    hardware_init
  * @brief   硬件初始化
  * @param   None
  * @retval
  * @author  
  * @Data    2023-03-13
  * 1. ...
  * <modify staff>:
  * <data>        :
  * <description> :
  * 2. ...
 **/
/* -------------------------------- end -------------------------------- */
void hardware_init(void)
{
	gpio_init();               //GPIO初始化
	uart_init(38400);          //串口初始化
	timer_init();
	nvic_init();               //中断使能
}


/* -------------------------------- begin  -------------------------------- */
/**
  * @Name    Software_init
  * @brief   软件初始化
  * @param   None
  * @retval
  * @author  
  * @Data    2023-03-13
  * 1. ...
  * <modify staff>:
  * <data>        :
  * <description> :
  * 2. ...
 **/
/* -------------------------------- end -------------------------------- */

void Software_init(void)
{
	static u8 U8_200msCnt = 0;
	//延时一段时间等待单片机稳定
	for(U8_200msCnt = 0;U8_200msCnt<200;U8_200msCnt++)
	{
		while(fGlobal_1ms == 0){};
		fGlobal_1ms = 0;
	}
}
